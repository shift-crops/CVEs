let qword = new ArrayBuffer(8);
let f64 = new Float64Array(qword);
let u32 = new Uint32Array(qword);

function u2f(v){
	u32[0] = v % 0x100000000;
	u32[1] = v / 0x100000000 >> 0;
	return f64[0];
}

function f2u(v){
	f64[0] = v;
	return u32[1] * 0x100000000 + u32[0];
}

let u2jsv = v => u2f(v - 0x1000000000000);
let jsv2u = v => f2u(v) + 0x1000000000000;

function hex(x) {
	return `0x${x.toString(16)}`
}

function hexlify(bytes) {
	let tohex = b => {`0${b.toString(16)}`.substr(-2)};

    let res = [];
    for(let i = 0; i < bytes.length; i++)
        res.push(tohex(bytes[i]));

    return res.join('');
}

function unhexlify(hexstr) {
	let buflen = hexstr.length / 2;

    let buf = new ArrayBuffer(buflen);
    let bytes = new Uint8Array(buf);
    for(let i = 0; i < hexstr.length; i += 2)
        bytes[i/2] = parseInt(hexstr.substr(i, 2), 16);

    return buf;
}

function string_to_buffer(src) {
  return (new Uint8Array([].map.call(src, function(c) {
    return c.charCodeAt(0)
  }))).buffer;
}

function concat_buffer(segments) {
	var sumLength = 0;
	for(var i = 0; i < segments.length; ++i){
		sumLength += segments[i].byteLength;
	}
	var whole = new Uint8Array(((sumLength + 3)/4>>0)*4);
	var pos = 0;
	for(var i = 0; i < segments.length; ++i){
		whole.set(new Uint8Array(segments[i]),pos);
		pos += segments[i].byteLength;
	}
	return whole.buffer;
}

//let print = s => document.getElementById('log').innerText += s + '\n'
